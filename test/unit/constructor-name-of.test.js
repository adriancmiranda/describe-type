import test from 'ava';
import ObjectFixture from '../fixtures/object.fixture';
import type from '../../';

test('constructorNameOf', (t) => {
	t.is(toString.call(type.constructorNameOf), '[object Function]');
	t.is(type.constructorNameOf((() => arguments)()), 'Arguments');
	t.is(type.constructorNameOf(() => 'foo'), 'Function');
	t.is(type.constructorNameOf(function () { return 'foo'; }), 'Function');
	t.is(type.constructorNameOf(Promise), 'Promise');
	t.is(type.constructorNameOf(Symbol), 'Symbol');
	t.is(type.constructorNameOf(Symbol.name), 'String');
	t.is(type.constructorNameOf(String), 'String');
	t.is(type.constructorNameOf(String.name), 'String');
	t.is(type.constructorNameOf(RegExp), 'RegExp');
	t.is(type.constructorNameOf(RegExp.name), 'String');
	t.is(type.constructorNameOf(Number), 'Number');
	t.is(type.constructorNameOf(Number.name), 'String');
	t.is(type.constructorNameOf(TypeError), 'TypeError');
	t.is(type.constructorNameOf(TypeError.name), 'String');
	t.is(type.constructorNameOf(Error), 'Error');
	t.is(type.constructorNameOf(Error.name), 'String');
	t.is(type.constructorNameOf(Object), 'Object');
	t.is(type.constructorNameOf(Object.name), 'String');
	t.is(type.constructorNameOf(Array), 'Array');
	t.is(type.constructorNameOf(Array.name), 'String');
	t.is(type.constructorNameOf(Boolean), 'Boolean');
	t.is(type.constructorNameOf(Boolean.name), 'String');
	t.is(type.constructorNameOf(Date), 'Date');
	t.is(type.constructorNameOf(Date.name), 'String');
	t.is(type.constructorNameOf(null), 'Null');
	t.is(type.constructorNameOf(undefined), 'Undefined');
	t.is(type.constructorNameOf(Infinity), 'Infinity');
	t.is(type.constructorNameOf(NaN), 'NaN');
	t.is(type.constructorNameOf(NaN.name), 'Undefined');
	t.is(type.constructorNameOf('ab|ba'), 'String');
	t.is(type.constructorNameOf(new ObjectFixture()), 'ObjectFixture');
	t.is(type.constructorNameOf(ObjectFixture), 'ObjectFixture');
	t.is(type.constructorNameOf(ObjectFixture.name), 'String');
	t.is(type.constructorNameOf([1, 2]), 'Array');
	t.is(type.constructorNameOf(/^./g), 'RegExp');
	t.is(type.constructorNameOf(10000), 'Number');
	t.is(type.constructorNameOf({ name: 1 }), 'Object');
	t.is(type.constructorNameOf(false), 'Boolean');
	t.is(type.constructorNameOf(new Date()), 'Date');
	t.is(type.constructorNameOf(ArrayBuffer), 'ArrayBuffer');
	t.is(type.constructorNameOf(Buffer), 'Buffer');
	t.is(type.constructorNameOf(Buffer.name), 'String');
	t.is(type.constructorNameOf(new Buffer('ab')), 'Buffer');
	t.is(type.constructorNameOf(new Promise((resolve) => { resolve(); })), 'Promise');
});
