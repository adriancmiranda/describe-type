import test from 'ava';
import ObjectFixture from '../fixtures/object.fixture';
import type from '../../';

test('name', (t) => {
	t.is(toString.call(type.name), '[object Function]');
	t.is(type.name((() => arguments)()), 'Arguments');
	t.is(type.name(Promise), 'Promise');
	t.is(type.name(Symbol), 'Symbol');
	t.is(type.name(String), 'String');
	t.is(type.name(RegExp), 'RegExp');
	t.is(type.name(Number), 'Number');
	t.is(type.name(TypeError), 'TypeError');
	t.is(type.name(Error), 'Error');
	t.is(type.name(Object), 'Object');
	t.is(type.name(Array), 'Array');
	t.is(type.name(Boolean), 'Boolean');
	t.is(type.name(Date), 'Date');
	t.is(type.name(null), 'Null');
	t.is(type.name(undefined), 'Undefined');
	t.is(type.name(NaN), 'NaN');
	t.is(type.name('|a-b|b>a|', true), '_a_b|b_a_');
	t.is(type.name('ab|ba', true), 'ab|ba');
	t.is(type.name('ab|ba'), 'String');
	t.is(type.name(new ObjectFixture('FixtureTest')), 'FixtureTest');
	t.is(type.name(ObjectFixture), 'FixtureTest');
	t.is(type.name([1, 2]), 'Array');
	t.is(type.name(/^./g), 'RegExp');
	t.is(type.name(10000), 'Number');
	t.is(type.name({ name: 1 }), 'Object');
	t.is(type.name(false), 'Boolean');
	t.is(type.name(new Date()), 'Date');
	t.is(type.name(ArrayBuffer), 'ArrayBuffer');
	t.is(type.name(new ArrayBuffer(4)), 'ArrayBuffer');
	t.is(type.name(new Int32Array(new ArrayBuffer(8))), 'Int32Array');
	t.is(type.name(Buffer), 'Buffer');
	t.is(type.name(new Buffer('ab')), 'Buffer');
});
